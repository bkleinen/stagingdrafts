<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Labs and Exercises on STAGING DRAFTS --- Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/</link><description>Recent content in Labs and Exercises on STAGING DRAFTS --- Prof. Dr. Barne Kleinen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/index.xml" rel="self" type="application/rss+xml"/><item><title>Exercise 00: Lab Startup</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-00/</guid><description>This page contains instructions on how you can prepare for the Info1 labs, that is, opening source code in greenfoot (or bluej) and uploading reports to moodle.
Intro Welcome to the laboratory - that&amp;rsquo;s what we call these rooms filled with computer equipment. We have lots of rules for the labs, as they are used by many different people during the week. You find a link to the rules (&amp;ldquo;Laborordnung&amp;rdquo;) here.</description></item><item><title>Exercise 01: Sending Messages to Objects</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-01/</guid><description>sequenceDiagram actor You create Participant Picture You->>+Picture:new() You->>+Picture:draw() create Participant Circle Picture->>+Circle: new() Circle-->>-Picture:circle Picture->>+Circle: makeVisible() Circle-->>-Picture:void Picture-->>-You:void This week&amp;rsquo;s lab is all about exploring given Objects by sending them messages (aka in Java: calling methods) - and writing your first programs by putting them together in your own methods.
What to bring to lab P1. In the lecture we have talked about data types called int and String. Java has more predefined primitive data types.</description></item><item><title>Exercise 02: TicketMachine</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-02/</guid><description>Printed Ticket. Sludge G
Source code for this exercise: https://github.com/htw-imi-info1/chapter02 Pre-lab 1. What could be wrong with the following constructor? Don&amp;rsquo;t execute it, think about it in your head.
public TicketMachine (int ticketCost) { int price = ticketCost; balance = 0; total = 0; } 2. How can you tell the difference between a method and a constructor just by looking at its header?
3. What do you think would be printed if you altered the fourth statement of printTicket so that price also has quotes around it, as follows: System.</description></item><item><title>Exercise 03: Book Exercise</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-03/</guid><description>Books. Abhi Sharma
This week&amp;rsquo;s lab work is intended to practice creating classes with data fields, constructors, methods, assignments and conditional statements.
Pre-lab What to Bring to Lab Please finish these exercises before coming to lab.
P1. Why does the following version of refundBalance not give the same results as what we saw in class?
public int refundBalance() { balance = 0; return balance; } P2.
What happens if you try to compile the TicketMachine class with the following version of refundBalance?</description></item><item><title>Exercise 04: Rock Around the Clock</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-04/</guid><description>Katarina Elevator in Stockholm, Foto by Arjan Richter
This week&amp;rsquo;s lab work is intended to get you to implement parts of a class that is given for you. You are also to begin to see the idea of modularization, that is, splitting up code into classes.
Pre-lab P0. Which of the following expressions returns true? After writing your answers on paper, open the CodePad in BlueJ and try it out.</description></item><item><title>Exercise 05: A Better Notebook</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-05/</guid><description>Foto by waferboard
This week&amp;rsquo;s lab work is intended help you practice using loops.
Pre-lab P0. Write a loop on paper that prints out all multiples of 5 between 10 and 95.
P1. Write a method called sumBetween that adds up all numbers between two numbers, a and b, that are passed into the method as parameters. Include a but not b in the sum.
P2. Assume you have a collection of students called imi1.</description></item><item><title>Exercise 06: Lotto and Technical Support</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-06/</guid><description>This week&amp;rsquo;s lab work is intended give you practice using more classes from the Java API: the Random class, Sets and Maps.
Pre-Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. How do you generate random numbers between 1 and 10 with Java? In what package is the library?
P2. How do you define an array that can count how often the numbers between 1 and 10 are generated?</description></item><item><title>Exercise 07: Lambda Functions</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-07/</guid><description>Sources: https://commons.wikimedia.org/wiki/File:Aye-aye_(Daubentonia_madagascariensis).jpg https://en.m.wikipedia.org/wiki/File:Kakapo_Sirocco_1.jpg
This week&amp;rsquo;s lab work is intended help you better understand lambda functions, and Kara has a comeback to practice iterating through Lists.
Source code for this exercise: https://github.com/htw-imi-info1/exercise07-lambda-expressions Pre-lab Please prepare these Exercises *before* coming to lab! Doing the pre-lab will save you time during the lab.
P0. If you have a collection called myList, what Java code would you have to write to apply some code to each of the members in the list?</description></item><item><title>Exercise 08: Testing with JUnit</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-08/</guid><description>This week&amp;rsquo;s lab work is intended give you practice developing test cases and testing and writing Unit Tests.
Source code for this lab: https://github.com/htw-imi-info1/chapter09_testing - diary-prototype
Pre Lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. Write down six test cases for Day and Appointment that. Give each test case (and, if applicable the ones from the lecture) a name.</description></item><item><title>Exercise 09: The World of You</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-09/</guid><description>This week’s lab work will begin a larger project that will occupy us until the end of the semester.
Source code for this exercise: https://github.com/htw-imi-info1/exercise09-zuul Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Invent your own game scenario away from the computer. Don&amp;rsquo;t worry about implementation or classes or programming. Just try and come up with something interesting. It needs to be the basic structure of a player moving through different locations.</description></item><item><title>Exercise 10: Use Inheritance for Commands</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-10/</guid><description>This week’s lab work will continue the zuul project.
classDiagram Command &amp;lt;|-- Go Command &amp;lt;|-- Quit Command &amp;lt;|-- Help Command &amp;lt;|-- Look Command &amp;lt;|-- Eat &amp;lt;&amp;lt;abstract&amp;gt;&amp;gt; Command class Command{ processCommand(Player)* } class Go{ processCommand(Player) } class Quit{ processCommand(Player) } class Help{ processCommand(Player) } class Look{ processCommand(Player) } class Eat{ processCommand(Player) } The Class Hierarchy for Commands.
Overview The Game class has become longer and longer every time we added a new command!</description></item><item><title>Exercise 11: Keeping Track of Stuff</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-11/</guid><description>This week’s lab work will continue a larger project that will occupy us until the end of the semester.
Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P1. What items could be kept in the locations in your game? Come up with a list of at least 10 items. How heavy is each item?
P2. What will the starting position of the items be?</description></item><item><title>Exercise 12: Pick up and Carry</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-12/</guid><description>This week&amp;rsquo;s lab work will finish up your project.
Pre-lab Prepare your prelab before coming to class! Doing the pre-lab will save you time during the lab.
P0. Here are some informal specifications: A player must be able to pick up items from the current room. They can carry any number of items, but only up to a maximum weight limit. Some items are too heavy to be picked up. The player can drop one or all items in the current location.</description></item><item><title>KaraClock Complete</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/karaclock-complete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/karaclock-complete/</guid><description>This is a complete overview of the KaraClock Exercises that lead to the implementation of the KaraClockDisplay-Example. The exercises are distributed through three Labs, as shown by the headlines here.
The material section contains an article about why I made this addition to the ClockDisplay example: ClockDisplay Example: Reflections and Improvements.
Open the Greenfoot-Kara project https://github.com/htw-imi-info1/kara-clock-lab. It contains several test worlds. Make sure you&amp;rsquo;ve instantiated the correct test world!
If you haven&amp;rsquo;t already done so, you need to install Greenfoot to open the scenarios.</description></item><item><title>Old Exercise 01: Programming Kara</title><link>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-01-kara/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/stagingdrafts/classes/ws2023/info1/labs/exercise-01-kara/</guid><description>Source code for this exercise: https://github.com/htw-imi-info1/exercise01-kara Pre-Lab Each lab assignment comes with a pre-lab section. Usually, it includes excercises and research questions that prepare you for the lab assignment. You&amp;rsquo;re expected to complete these before you come to the lab.
Download the Scenarios and read through the Kara programming exercises in the assignment.
Write down how Kara could solve the task for each one of them. For example, if the programming exercise was Exercise 4 from Worksheet 1, where Kara was to move in a Square and drop a leaf in each corner, you could write down something as this:</description></item></channel></rss>